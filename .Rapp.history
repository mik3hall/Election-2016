t(A)
A*t(x)
A%*%t(x)
pdata <- c(6,5,3,1,3,6,2,2,3,4,3,1)
?matrix
P <- matrix(pdata,nrow=3,ncol=4,T)
P
sdata <- c(1.5,1,2,2.5,5,4.5,16,17)
S <- matrix(sdata,nrow=4,ncol=2,T)
S
P%*%S
X <- P%*%S
sum(X[,1])
sum(X[,2])
15000/13400
15000/13489
15000/14000
15000/13600
15000/13660
?timezone
library(rrcov)
install.packages("rrcov")
data(bus)
library(rrcov)
data(bus)
1165+118+128
15000/12547
4.206-1.195505
35674/12547
4.206-2.843229
1.362771*12591
15000/12626
35674/12626
4.206-2.82544
1.38056*12626
15000/12850
35674/12850
35674/12762
35674/12857
15000/12782
15000/12000
15000/12079
15000/12020
15000/12063
35674/12090
library(rcov)
library(rrcov)
h = 35674.16
h / 11161.1
4.2604 - 3.196294
h / 11081.31
bc <- 4.2604
bc - 3.219309
h / 11143.98
bc - 3.201205
1.059195*11143.98
h / 11193.74
bc - 3.186974
h / 11215
bc - 3.180933
bc <- 3.2604
h <- 35674.16
11005*bc
h/bc
h / 11118
bc - (h / 11118)
bc - (h / 11340)
bc - (h / 11439)
h / 11439
h <- 35674.16
bc <- 3.2604
bc - (h / 11268)
bc - (h / 11438)
bc - (h / 11456)
bc - (h / 11354)
bc - (h / 11424)
install.packages("rsvd")
rpca
library(rsvd)
rpca
rpca()
rpca
library(rsvd)
rpca
rsvd::rpca
library(RCurl)
library(quantmod)
aapl_front <- getOptionChain ('AAPL')
head(aapl_front)
aapl_front
aapl_front <- getOptionChain ('AAPL',3)
str(aapl_front)
library(quantmod)
getSymbols(‘SPY’,from=’2007/01/01′)
getSymbols('SPY',from='2007/01/01')
vol=volatility(SPY,n=25,N=252,calc=’close’)
vol=volatility(SPY,n=25,N=252,calc='close')
chartSeries(vol)
head(vol)
tail(vol)
mean(vol[,1])
?mean
mean(vol[,1],na.rm=TRUE)
getSymbols('X',from='2016/01/01')
vol=volatility(X,n=25,N=252,calc='close')
mean(vol[,1],na.rm=TRUE)
getSymbols(‘PFE’,from=’2016/01/01′)
getSymbols('PFE',from='2016/01/01')
vol=volatility(PFE,n=25,N=252,calc='close')
mean(vol[,1],na.rm=TRUE)
library(fOptions)
?gbs
?GBS
?GBSGreeks
library(quantmod)
?volatility
library(quantmod)
?volatility
library(Quandl)
?vol
?getSymbols
spy <- getSymbols("SPY",auto.assign=FALSE)
head(spy)
spy <- getSymbols("SPY","2016/2017",auto.assign=FALSE)
head(spy)
spy <- getSymbols("SPY",from="2016/2017",auto.assign=FALSE)
spy <- getSymbols("SPY",from="2016",auto.assign=FALSE)
spy <- getSymbols("SPY",from="2016-01-01",auto.assign=FALSE)
head(spy)
vol <- function(priceSeriesDaily) {#
	sqrt(252) * sd(diff(log(priceSeriesDaily))) * 100#
}
vol(spy$SPY.Adjusted)
table(is.na(spy$SPY.Adjusted))
str(spy$SPY.Adjusted)
str(as.numeric(spy$SPY.Adjusted))
x1 <- as.numeric(spy$SPY.Adjusted)
)
x1 <- as.numeric(spy$SPY.Adjusted)
head(x1)
x2 <- drop(core.data(spy$SPY.Adjusted))
library(xts)
x2 <- drop(core.data(spy$SPY.Adjusted))
x2 <- drop(coredata(spy$SPY.Adjusted))
head(x2)
vol(x2)
vol(x2)/100
?annualReturns
annualReturn
?annualReturn
X <- getSymbols("X",from="2016-01-01",auto.assign=FALSE)
head(X)
vol(as.numeric(X$X.Adjusted))
pfe <- getSymbols("PFE",from="2016-01-01",auto.assign=FALSE)
vol(as.numeric(pfe$pfe.Adjusted))
head(pfe)
vol(as.numeric(pfe$PFE.Adjusted))
vol(as.numeric(pfe$PFE.Adjusted))/100
library(rvest)
install.packages("rvest")
library(rvest)
?options
sp500_wiki <- read_html(#
  "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies")#
#
symbols_table <- sp500_wiki %>%#
  html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]') %>%#
  html_table()#
#
symbols_table <- symbols_table[[1]]#
symbols <- as.character(symbols_table$`Ticker symbol`)
head(symbols)
tail(symbols)
length(symbols)
library(TTR)
?stockSymbols
which(symbols = "X")
str(symbols)
library(rvest)#
# Web-scrape SP500 stock list#
sp_500 <- read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies") %>%#
    html_node("table.wikitable") %>%#
    html_table() %>%#
    select(`Ticker symbol`, Security, `GICS Sector`, `GICS Sub Industry`) %>%#
    as_tibble()#
# Format names#
names(sp_500) <- sp_500 %>% #
    names() %>% #
    str_to_lower() %>% #
    make.names()#
# Show results#
sp_500
?read_html
?as_tibble
install.packages("Tibble")
install.packages("tibble")
library(rvest)#
# Web-scrape SP500 stock list#
sp_500 <- read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies") %>%#
    html_node("table.wikitable") %>%#
    html_table() %>%#
    select(`Ticker symbol`, Security, `GICS Sector`, `GICS Sub Industry`) %>%#
    as_tibble()#
# Format names#
names(sp_500) <- sp_500 %>% #
    names() %>% #
    str_to_lower() %>% #
    make.names()#
# Show results#
sp_500
?select
library(dplyr)
library(rvest)#
# Web-scrape SP500 stock list#
sp_500 <- read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies") %>%#
    html_node("table.wikitable") %>%#
    html_table() %>%#
    select(`Ticker symbol`, Security, `GICS Sector`, `GICS Sub Industry`) %>%#
    as_tibble()#
# Format names#
names(sp_500) <- sp_500 %>% #
    names() %>% #
    str_to_lower() %>% #
    make.names()#
# Show results#
sp_500
install.packages("stringr")
library(rvest)#
# Web-scrape SP500 stock list#
sp_500 <- read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies") %>%#
    html_node("table.wikitable") %>%#
    html_table() %>%#
    select(`Ticker symbol`, Security, `GICS Sector`, `GICS Sub Industry`) %>%#
    as_tibble()#
# Format names#
names(sp_500) <- sp_500 %>% #
    names() %>% #
    str_to_lower() %>% #
    make.names()#
# Show results#
sp_500
str(sp_500)
library(rvest)#
library(tibble)#
library(dplyr)#
library(stringr)#
# Web-scrape SP500 stock list#
sp_500 <- read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies") %>%#
    html_node("table.wikitable") %>%#
    html_table() %>%#
    select(`Ticker symbol`, Security, `GICS Sector`, `GICS Sub Industry`) %>%#
    as_tibble()#
# Format names#
names(sp_500) <- sp_500 %>% #
    names() %>% #
    str_to_lower() %>% #
    make.names()#
# Show results#
sp_500
sp_500[ticker.symbol="X",]
sp_500[,ticker.symbol="X"]
sp_500[,ticker.symbol=="X"]
sp_500[sp_500$ticker.symbol=="X",]
sp_500[sp_500$ticker.symbol=="X",1:4]
sp_500[sp_500$ticker.symbol=="MMM",1:4]
library(quantmod)
?chartSeries
library(quantmod)   # get stock prices; useful stock analysis functions#
library(xts)        # working with extensible time series #
library(rvest)      # web scraping#
library(tidyverse)  # ggplot2, purrr, dplyr, tidyr, readr, tibble#
library(stringr)    # working with strings#
library(forcats)    # working with factors#
library(lubridate)  # working with dates in tibbles / data frames#
library(plotly)     # Interactive plots#
library(corrplot)   # Visuazlize correlation plots
install.packages("xml2")
install.packages("tidyverse")
library(quantmod)   # get stock prices; useful stock analysis functions#
library(xts)        # working with extensible time series #
library(rvest)      # web scraping#
library(tidyverse)  # ggplot2, purrr, dplyr, tidyr, readr, tibble#
library(stringr)    # working with strings#
library(forcats)    # working with factors#
library(lubridate)  # working with dates in tibbles / data frames#
library(plotly)     # Interactive plots#
library(corrplot)   # Visuazlize correlation plots
install.packages("plotly")
library(quantmod)   # get stock prices; useful stock analysis functions#
library(xts)        # working with extensible time series #
library(rvest)      # web scraping#
library(tidyverse)  # ggplot2, purrr, dplyr, tidyr, readr, tibble#
library(stringr)    # working with strings#
library(forcats)    # working with factors#
library(lubridate)  # working with dates in tibbles / data frames#
library(plotly)     # Interactive plots#
library(corrplot)   # Visuazlize correlation plots
library(corrplot)
getSymbols("MA", from = "2007-01-01", to = "2016-10-23")
MA
MA %>% class()
MA %>% str
MA %>% head()
MA %>% #
    Ad() %>% #
    chartSeries()
MA %>%#
    chartSeries(TA='addBBands();#
                    addBBands(draw="p");#
                    addVo();#
                    addMACD()', #
                subset='2016',#
                theme="white"#
                )
MA_log_returns <- MA %>%#
    Ad() %>%#
    dailyReturn(type = "log")
names(MA_log_returns) <- "MA.Log.Returns"
MA_log_returns %>%    #
    ggplot(aes(x = MA.Log.Returns)) + #
    geom_histogram(bins = 100) + #
    geom_density() +#
    geom_rug(alpha = 0.5)
probs <- c(.005, .025, .25, .5, .75, .975, .995)#
dist_log_returns <- MA_log_returns %>% #
    quantile(probs = probs, na.rm = TRUE)#
dist_log_returns
mean_log_returns %>% exp()
# Parameters#
N     <- 1000#
mu    <- mean_log_returns#
sigma <- sd_log_returns#
day <- 1:N#
price_init <- MA$MA.Adjusted[[nrow(MA$MA.Adjusted)]]#
# Simulate prices#
set.seed(386) #
price  <- c(price_init, rep(NA, N-1))#
for(i in 2:N) {#
    price[i] <- price[i-1] * exp(rnorm(1, mu, sigma))#
}#
price_sim <- cbind(day, price) %>% #
    as_tibble()#
# Visualize price simulation#
price_sim %>%#
    ggplot(aes(day, price)) +#
    geom_line() +#
    ggtitle(str_c("MA: Simulated Prices for ", N," Trading Days"))
# Parameters#
N     <- 252 # Number of Stock Price Simulations#
M     <- 250  # Number of Monte Carlo Simulations   #
mu    <- mean_log_returns#
sigma <- sd_log_returns#
day <- 1:N#
price_init <- MA$MA.Adjusted[[nrow(MA$MA.Adjusted)]]#
# Simulate prices#
set.seed(123)#
monte_carlo_mat <- matrix(nrow = N, ncol = M)#
for (j in 1:M) {#
    monte_carlo_mat[[1, j]] <- price_init#
    for(i in 2:N) {#
        monte_carlo_mat[[i, j]] <- monte_carlo_mat[[i - 1, j]] * exp(rnorm(1, mu, sigma))#
    }#
}#
# Format and organize data frame#
price_sim <- cbind(day, monte_carlo_mat) %>%#
    as_tibble() #
nm <- str_c("Sim.", seq(1, M))#
nm <- c("Day", nm)#
names(price_sim) <- nm#
price_sim <- price_sim %>%#
    gather(key = "Simulation", value = "Stock.Price", -(Day))#
# Visualize simulation#
price_sim %>%#
    ggplot(aes(x = Day, y = Stock.Price, Group = Simulation)) + #
    geom_line(alpha = 0.1) +#
    ggtitle(str_c("MA: ", M, #
                  " Monte Carlo Simulations for Prices Over ", N, #
                  " Trading Days"))
mean_log_returns <- mean(MA_log_returns, na.rm = TRUE)#
sd_log_returns <- sd(MA_log_returns, na.rm = TRUE)
# Parameters#
N     <- 1000#
mu    <- mean_log_returns#
sigma <- sd_log_returns#
day <- 1:N#
price_init <- MA$MA.Adjusted[[nrow(MA$MA.Adjusted)]]#
# Simulate prices#
set.seed(386) #
price  <- c(price_init, rep(NA, N-1))#
for(i in 2:N) {#
    price[i] <- price[i-1] * exp(rnorm(1, mu, sigma))#
}#
price_sim <- cbind(day, price) %>% #
    as_tibble()#
# Visualize price simulation#
price_sim %>%#
    ggplot(aes(day, price)) +#
    geom_line() +#
    ggtitle(str_c("MA: Simulated Prices for ", N," Trading Days"))
str(price_sim)
price_sim %>%#
    ggplot(aes(day, price)) +#
    geom_line() +#
    ggtitle(str_c("MA: Simulated Prices for ", N," Trading Days"))
# Parameters#
N     <- 252 # Number of Stock Price Simulations#
M     <- 250  # Number of Monte Carlo Simulations   #
mu    <- mean_log_returns#
sigma <- sd_log_returns#
day <- 1:N#
price_init <- MA$MA.Adjusted[[nrow(MA$MA.Adjusted)]]#
# Simulate prices#
set.seed(123)#
monte_carlo_mat <- matrix(nrow = N, ncol = M)#
for (j in 1:M) {#
    monte_carlo_mat[[1, j]] <- price_init#
    for(i in 2:N) {#
        monte_carlo_mat[[i, j]] <- monte_carlo_mat[[i - 1, j]] * exp(rnorm(1, mu, sigma))#
    }#
}#
# Format and organize data frame#
price_sim <- cbind(day, monte_carlo_mat) %>%#
    as_tibble() #
nm <- str_c("Sim.", seq(1, M))#
nm <- c("Day", nm)#
names(price_sim) <- nm#
price_sim <- price_sim %>%#
    gather(key = "Simulation", value = "Stock.Price", -(Day))#
# Visualize simulation#
price_sim %>%#
    ggplot(aes(x = Day, y = Stock.Price, Group = Simulation)) + #
    geom_line(alpha = 0.1) +#
    ggtitle(str_c("MA: ", M, #
                  " Monte Carlo Simulations for Prices Over ", N, #
                  " Trading Days"))
end_stock_prices <- price_sim %>% #
    filter(Day == max(Day))#
probs <- c(.005, .025, .25, .5, .75, .975, .995)#
dist_end_stock_prices <- quantile(end_stock_prices$Stock.Price, probs = probs)#
dist_end_stock_prices %>% round(2)
N_hist          <- nrow(MA) / 252#
p_start_hist    <- MA$MA.Adjusted[[1]]#
p_end_hist      <- MA$MA.Adjusted[[nrow(MA)]]#
N_sim           <- N / 252#
p_start_sim     <- p_end_hist#
p_end_sim       <- dist_end_stock_prices[[4]]#
# CAGR calculations#
CAGR_historical <- (p_end_hist / p_start_hist) ^ (1 / N_hist) - 1#
CAGR_sim        <- (p_end_sim / p_start_sim) ^ (1 / N_sim) - 1
library(rvest)#
# Web-scrape SP500 stock list#
sp_500 <- read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies") %>%#
    html_node("table.wikitable") %>%#
    html_table() %>%#
    select(`Ticker symbol`, Security, `GICS Sector`, `GICS Sub Industry`) %>%#
    as_tibble()#
# Format names#
names(sp_500) <- sp_500 %>% #
    names() %>% #
    str_to_lower() %>% #
    make.names()#
# Show results#
sp_500
sp_500[which(sp_500$gics.sector == "Information Technology"),]
table(sp_500$gics.sector)
sp_500 %>%#
    # Summarise data by frequency#
    group_by(gics.sector) %>%#
    summarise(count = n()) %>%#
    # Visualize #
    ggplot(aes(x = gics.sector %>% fct_reorder(count),#
               y = count#
               )) + #
    geom_bar(stat = "identity") +#
    geom_text(aes(label = count), size = 3, nudge_y = 4, nudge_x = .1) + #
    scale_y_continuous(limits = c(0,100)) +#
    ggtitle(label = "Sector Frequency Among SP500 Stocks") +#
    xlab(label = "GICS Sector") +#
    theme(plot.title = element_text(size = 16)) + #
    coord_flip()
get_stock_prices <- function(ticker, return_format = "tibble", ...) {#
    # Get stock prices#
    stock_prices_xts <- getSymbols(Symbols = ticker, auto.assign = FALSE, ...)#
    # Rename#
    names(stock_prices_xts) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")#
    # Return in xts format if tibble is not specified#
    if (return_format == "tibble") {#
        stock_prices <- stock_prices_xts %>%#
            as_tibble() %>%#
            rownames_to_column(var = "Date") %>%#
            mutate(Date = ymd(Date))#
    } else {#
        stock_prices <- stock_prices_xts#
    }#
    stock_prices#
}
stock_prices
"MA" %>%#
    get_stock_prices(return_format = 'tibble')
get_log_returns <- function(x, return_format = "tibble", period = 'daily', ...) {#
    # Convert tibble to xts#
    if (!is.xts(x)) {#
        x <- xts(x[,-1], order.by = x$Date)#
    }#
    # Get log returns#
    log_returns_xts <- periodReturn(x = x$Adjusted, type = 'log', period = period, ...)#
    # Rename#
    names(log_returns_xts) <- "Log.Returns"#
    # Return in xts format if tibble is not specified#
    if (return_format == "tibble") {#
        log_returns <- log_returns_xts %>%#
            as_tibble() %>%#
            rownames_to_column(var = "Date") %>%#
            mutate(Date = ymd(Date))#
    } else {#
        log_returns <- log_returns_xts#
    }#
    log_returns#
}
sp_500 <- sp_500 %>%#
    mutate(#
        stock.prices = map(ticker.symbol, #
                              function(.x) get_stock_prices(.x, #
                                                            return_format = "tibble",#
                                                            from = "2007-01-01",#
                                                            to = "2016-10-23")#
                           ),#
        log.returns  = map(stock.prices, #
                              function(.x) get_log_returns(.x, return_format = "tibble")),#
        mean.log.returns = map_dbl(log.returns, ~ mean(.$Log.Returns)),#
        sd.log.returns   = map_dbl(log.returns, ~ sd(.$Log.Returns)),#
        n.trade.days = map_dbl(stock.prices, nrow)#
        )
sp_500 <- sp_500 %>%#
    mutate(#
        stock.prices = map(ticker.symbol, #
                              function(.x) get_stock_prices(.x, #
                                                            return_format = "tibble",#
                                                            from = "2016-01-01",#
                                                            to = "2018-02-01")#
                           ),#
        log.returns  = map(stock.prices, #
                              function(.x) get_log_returns(.x, return_format = "tibble")),#
        mean.log.returns = map_dbl(log.returns, ~ mean(.$Log.Returns)),#
        sd.log.returns   = map_dbl(log.returns, ~ sd(.$Log.Returns)),#
        n.trade.days = map_dbl(stock.prices, nrow)#
        )
get_stock_prices
sp_500 <- sp_500 %>%#
    mutate(#
        stock.prices = map(ticker.symbol, #
                              function(.x) get_stock_prices(.x, #
                                                            return_format = "tibble",#
                                                            from = "2018-01-01",#
                                                            to = "2018-02-01")#
                           ),#
        log.returns  = map(stock.prices, #
                              function(.x) get_log_returns(.x, return_format = "tibble")),#
        mean.log.returns = map_dbl(log.returns, ~ mean(.$Log.Returns)),#
        sd.log.returns   = map_dbl(log.returns, ~ sd(.$Log.Returns)),#
        n.trade.days = map_dbl(stock.prices, nrow)#
        )
sp_500_list <- sp_500[1:10,] %>%#
    mutate(#
        stock.prices = map(ticker.symbol, #
                              function(.x) get_stock_prices(.x, #
                                                            return_format = "tibble",#
                                                            from = "2018-01-01",#
                                                            to = "2018-02-01")#
                           ),#
        log.returns  = map(stock.prices, #
                              function(.x) get_log_returns(.x, return_format = "tibble")),#
        mean.log.returns = map_dbl(log.returns, ~ mean(.$Log.Returns)),#
        sd.log.returns   = map_dbl(log.returns, ~ sd(.$Log.Returns)),#
        n.trade.days = map_dbl(stock.prices, nrow)#
        )
sp_500_list
?getSymbols
# Parameters#
N     <- 1000#
mu    <- mean_log_returns#
sigma <- sd_log_returns#
day <- 1:N#
price_init <- MA$MA.Adjusted[[nrow(MA$MA.Adjusted)]]#
# Simulate prices#
set.seed(386) #
price  <- c(price_init, rep(NA, N-1))#
for(i in 2:N) {#
    price[i] <- price[i-1] * exp(rnorm(1, mu, sigma))#
}#
price_sim <- cbind(day, price) %>% #
    as_tibble()#
# Visualize price simulation#
price_sim %>%#
    ggplot(aes(day, price)) +#
    geom_line() +#
    ggtitle(str_c("MA: Simulated Prices for ", N," Trading Days"))
ggplot(aes(day, price)) +#
    geom_line() +#
    ggtitle(str_c("MA: Simulated Prices for ", N," Trading Days"))
ggplot(price_sim,aes(day, price)) +#
    geom_line() +#
    ggtitle(str_c("MA: Simulated Prices for ", N," Trading Days"))
set.seed(1)
ggplot(price_sim,aes(day, price)) +#
    geom_line() +#
    ggtitle(str_c("MA: Simulated Prices for ", N," Trading Days"))
set.seed(123456)
ggplot(price_sim,aes(day, price)) +#
    geom_line() +#
    ggtitle(str_c("MA: Simulated Prices for ", N," Trading Days"))
price  <- c(price_init, rep(NA, N-1))#
for(i in 2:N) {#
    price[i] <- price[i-1] * exp(rnorm(1, mu, sigma))#
}#
price_sim <- cbind(day, price) %>% #
    as_tibble()
ggplot(price_sim,aes(day, price)) +#
    geom_line() +#
    ggtitle(str_c("MA: Simulated Prices for ", N," Trading Days"))
data04 <- read.csv("county04.csv")#
data08 <- read.csv("county08.csv")#
data12 <- read.csv("county12.csv")#
data16 <- read.csv("county16.csv")#
data04$County <- as.character(data04$County)#
data08$County <- as.character(data08$County)#
data12$County <- as.character(data12$County)#
data16$County <- as.character(data16$County)
data04 <- read.csv("county04.csv")#
data08 <- read.csv("county08.csv")#
data12 <- read.csv("county12.csv")#
data16 <- read.csv("county16.csv")#
data04$County <- as.character(data04$County)#
data08$County <- as.character(data08$County)#
data12$County <- as.character(data12$County)#
data16$County <- as.character(data16$County)
library(plyr)
mis0416 <- subset(data04,data04$County != data16$County,c(State,County))
nrow(mis0416)
head(mis0416)
data04[58,]
data16[58,]
arrange(data04,State,County)
